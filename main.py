import telebot
from telebot import types
import json
import os
from telethon import TelegramClient, events, errors
import asyncio
import re
import threading
from googletrans import Translator
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '8188485836:AAGeVVcISeIHlosZ-eLDOMSladaAevFEO8g'
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    with open('user_data.json', 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists('user_data.json'):
    with open('user_data.json', 'r', encoding='utf-8') as f:
        user_data = json.load(f)
        save_user_data()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'))
    keyboard.row(types.KeyboardButton('‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'))
    keyboard.row(types.KeyboardButton('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API'))
    keyboard.row(types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ'))
    return keyboard

def create_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
    return keyboard

def create_code_keyboard(current_code):
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(str(i), callback_data=f'code_digit_{i}') for i in range(1, 10)]
    buttons.append(InlineKeyboardButton('0', callback_data='code_digit_0'))
    buttons.append(InlineKeyboardButton('‚å´', callback_data='code_backspace'))
    buttons.append(InlineKeyboardButton('‚úÖ', callback_data='code_confirm'))
    keyboard.add(*buttons[:3])
    keyboard.add(*buttons[3:6])
    keyboard.add(*buttons[6:9])
    keyboard.add(buttons[9], buttons[10], buttons[11])
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è userbot
async def code_callback(user_id):
    code_file = f"codes/{user_id}.txt"
    print(f"[main.py] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    while not os.path.exists(code_file):
        await asyncio.sleep(1)
    with open(code_file, 'r') as f:
        code = f.read().strip()
    os.remove(code_file)
    print(f"[main.py] –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω –¥–ª—è user_id={user_id}: {code}")
    return code

async def run_userbot(api_id, api_hash, phone, session_name, user_id):
    client = TelegramClient(session_name, api_id, api_hash)

    @client.on(events.NewMessage(outgoing=True))
    async def handle_new_message(event):
        if event.text.startswith('en:'):
            text_to_translate = event.text[3:].strip()
            try:
                translation = translator.translate(text_to_translate, src='en', dest='ru')
                new_text = (
                    f"üá¨üáß en: {text_to_translate}\n\n"
                    f"üá∑üá∫ ru: {translation.text}"
                )
                await event.edit(new_text)
                print(f"[main.py] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è user_id={user_id}")
            except Exception as e:
                print(f"[main.py] Error translating message for user_id={user_id}: {e}")

    while True:
        try:
            await client.start(phone=phone, code_callback=lambda: code_callback(user_id))
            print(f"[main.py] Userbot started for {phone} (user_id={user_id})")
            await client.run_until_disconnected()
            break
        except errors.SessionPasswordNeededError:
            print(f"[main.py] –î–ª—è user_id={user_id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–∞—Ä–æ–ª—å). –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
            break
        except errors.PhoneCodeInvalidError:
            print(f"[main.py] ‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è user_id={user_id}. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞...")
            continue
        except Exception as e:
            print(f"[main.py] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
            break

def start_userbots():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç userbot'—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    async def run_all_userbots():
        for user_id, data in user_data.items():
            if all(key in data for key in ['api_id', 'api_hash', 'phone']):
                session_name = f'sessions/user_{user_id}'
                print(f"[main.py] –ó–∞–ø—É—Å–∫ userbot –¥–ª—è user_id={user_id}, phone={data['phone']}")
                await run_userbot(
                    data['api_id'],
                    data['api_hash'],
                    data['phone'],
                    session_name,
                    user_id
                )

    def run_async():
        asyncio.run(run_all_userbots())

    thread = threading.Thread(target=run_async)
    thread.daemon = True
    thread.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        user_data[user_id] = {'state': 'main'}
        save_user_data()
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "üîπ –Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'en:' —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
        "üîπ –î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == 'üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
def connect_account(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {'state': 'waiting_api_id'}
    save_user_data()
    
    text = (
        "üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –≤–∞—à–∏ API –¥–∞–Ω–Ω—ã–µ.\n\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID (—ç—Ç–æ —á–∏—Å–ª–æ):"
    )
    bot.send_message(message.chat.id, text, reply_markup=create_cancel_keyboard())

@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
def disconnect_account(message):
    user_id = str(message.from_user.id)
    if user_id in user_data and 'api_id' in user_data[user_id]:
        del user_data[user_id]
        save_user_data()
        bot.send_message(message.chat.id, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω!", reply_markup=create_main_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == 'üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API')
def show_api_instructions(message):
    instructions = (
        "üì± –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://my.telegram.org\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'\n"
        "4Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
        "   ‚Ä¢ App title: –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "   ‚Ä¢ Short name: –ª—é–±–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "   ‚Ä¢ Platform: Desktop\n"
        "   ‚Ä¢ Description: –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º\n"
        "5Ô∏è‚É£ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "   ‚Ä¢ api_id (—ç—Ç–æ —á–∏—Å–ª–æ)\n"
        "   ‚Ä¢ api_hash (—ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä)\n\n"
        "‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ!\n"
        "–û–Ω–∏ –¥–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram."
    )
    bot.send_message(message.chat.id, instructions, reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
def about_bot(message):
    about_text = (
        "ü§ñ –û –±–æ—Ç–µ:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n\n"
        "üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram\n"
        "2. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å 'en:'\n"
        "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n\n"
        "üîπ –ü—Ä–∏–º–µ—Ä:\n"
        "–í—ã –ø–∏—à–µ—Ç–µ: 'en: Hello, how are you?'\n"
        "–ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?'\n\n"
        "üîπ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    )
    bot.send_message(message.chat.id, about_text, reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞')
def cancel_action(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {'state': 'main'}
    save_user_data()
    bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    print(f"[main.py] handle_message: user_id={user_id}, state={user_data.get(user_id, {}).get('state')}")
    
    if user_id not in user_data:
        user_data[user_id] = {'state': 'main'}
        save_user_data()
    
    if user_data[user_id]['state'] == 'waiting_api_id':
        try:
            api_id = int(message.text)
            user_data[user_id]['api_id'] = api_id
            user_data[user_id]['state'] = 'waiting_api_hash'
            print(f"[main.py] API ID –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}: {api_id}")
            bot.send_message(message.chat.id, "‚úÖ API ID –ø—Ä–∏–Ω—è—Ç!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash:")
        except ValueError:
            print(f"[main.py] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID –æ—Ç user_id={user_id}: {message.text}")
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ):")
    
    elif user_data[user_id]['state'] == 'waiting_api_hash':
        api_hash = message.text.strip()
        if re.match(r'^[a-f0-9]{32}$', api_hash):
            user_data[user_id]['api_hash'] = api_hash
            user_data[user_id]['state'] = 'waiting_phone'
            save_user_data()
            print(f"[main.py] API Hash –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}: {api_hash}")
            bot.send_message(message.chat.id, "‚úÖ API Hash –ø—Ä–∏–Ω—è—Ç!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567):")
        else:
            print(f"[main.py] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API Hash –æ—Ç user_id={user_id}: {api_hash}")
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API Hash (32 —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã a-f –∏ —Ü–∏—Ñ—Ä—ã):")
    
    elif user_data[user_id]['state'] == 'waiting_phone':
        phone = message.text.strip()
        if re.match(r'^\+[0-9]{11,15}$', phone):
            user_data[user_id]['phone'] = phone
            user_data[user_id]['state'] = 'waiting_code_buttons'
            user_data[user_id]['code_input'] = ''
            save_user_data()
            print(f"[main.py] –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}: {phone}")
            bot.send_message(
                message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n–ö–æ–¥: ",
                reply_markup=create_code_keyboard('')
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            start_userbots()
        else:
            print(f"[main.py] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç user_id={user_id}: {phone}")
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567):")
    elif user_data[user_id]['state'] == 'waiting_code':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('code_'))
def code_input_callback(call):
    user_id = str(call.from_user.id)
    code = user_data[user_id].get('code_input', '')
    action = call.data
    if action.startswith('code_digit_'):
        digit = action.split('_')[-1]
        if len(code) < 10:
            code += digit
    elif action == 'code_backspace':
        code = code[:-1]
    elif action == 'code_confirm':
        if len(code) >= 3:
            os.makedirs('codes', exist_ok=True)
            with open(f'codes/{user_id}.txt', 'w') as f:
                f.write(code)
            print(f"[main.py] –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è user_id={user_id}: {code}")
            user_data[user_id]['state'] = 'main'
            user_data[user_id]['code_input'] = ''
            save_user_data()
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f'‚úÖ –ö–æ–¥ {code} –ø—Ä–∏–Ω—è—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...'
            )
            return
        else:
            bot.answer_callback_query(call.id, '–ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!')
    user_data[user_id]['code_input'] = code
    save_user_data()
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n–ö–æ–¥: {code}',
        reply_markup=create_code_keyboard(code)
    )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('sessions'):
        os.makedirs('sessions')
    if not os.path.exists('codes'):
        os.makedirs('codes')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º userbot'—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_userbots()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True) 